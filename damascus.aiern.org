#+setupfile: ./README.org
#+include: ./README.org

This can be used with =GNU Stow= as well! :D

The tangle functions are adapted from [[https://emacs.stackexchange.com/a/29884/31428][this answer on the emacs Stack Exchange]],
which was written by [[https://emacs.stackexchange.com/users/2710/andrew-swann][Andrew Swann]].

* home
** .emacs.d
*** .gitconfig

#+begin_src conf :tangle (meq/tangle-path)
[remote "aiern"]
	url = git@github.com:shadowrylander/aiern
	fetch = +refs/heads/*:refs/remotes/aiern/*
[remote "doom-aiern-modeline"]
	url = git@github.com:shadowrylander/doom-aiern-modeline
	fetch = +refs/heads/*:refs/remotes/doom-aiern-modeline/*
[remote "alloy"]
	url = git@github.com:shadowrylander/alloy.git
	fetch = +refs/heads/*:refs/remotes/alloy/*
[remote "alamode"]
	url = git@github.com:shadowrylander/alamode
	fetch = +refs/heads/*:refs/remotes/alamode/*
[remote "use-package-extras"]
	url = git@github.com:shadowrylander/use-package-extras
	fetch = +refs/heads/*:refs/remotes/use-package-extras/*
[remote "emux"]
	url = git@github.com:shadowrylander/emux
	fetch = +refs/heads/*:refs/remotes/emux/*
[remote "deino"]
	url = git@github.com:shadowrylander/deino
	fetch = +refs/heads/*:refs/remotes/deino/*
[remote "use-package-deino"]
	url = git@github.com:shadowrylander/use-package-deino
	fetch = +refs/heads/*:refs/remotes/use-package-deino/*
[remote "sorrow"]
	url = git@github.com:shadowrylander/sorrow
	fetch = +refs/heads/*:refs/remotes/sorrow/*
[remote "lode"]
	url = git@github.com:shadowrylander/lode
	fetch = +refs/heads/*:refs/remotes/lode/*
[remote "meq"]
	url = git@github.com:shadowrylander/meq.git
	fetch = +refs/heads/*:refs/remotes/meq/*
[remote "aiern-god-state"]
	url = git@github.com:shadowrylander/aiern-god-state
	fetch = +refs/heads/*:refs/remotes/aiern-god-state/*
#+end_src

*** makefile

#+call: hash() :exports none

#+RESULTS:
: 20210622004216528168500

#+name: 20210622004216528168500
#+begin_src makefile :tangle (meq/tangle-path)
.RECIPEPREFIX := |
.DEFAULT_GOAL := emacs

pull:
|git -C ~/<<username>>/home/.emacs.d pull
|git -C ~/<<username>>/home/.emacs.d subtree pull-all

push:
|git -C ~/<<username>>/home/.emacs.d add .
|-git -C ~/<<username>>/home/.emacs.d commit --allow-empty-message -am ""
|-git -C ~/<<username>>/home/.emacs.d push
|git -C ~/<<username>>/home/.emacs.d subtree prune
|-git -C ~/<<username>>/home/.emacs.d subtree push-all

copy:
|rsync -avvczz ~/<<username>>/home/.emacs.d/ ~/.emacs.d/

tangle-setup: copy
|chmod +x ~/.emacs.d/org-tangle
|yes yes| ~/.emacs.d/org-tangle ~/<<username>>/damascus.aiern.org
|make -f ~/<<username>>/home/.emacs.d/makefile copy

tangle: tangle-setup
|yes yes | ~/.emacs.d/org-tangle ~/<<username>>/*.aiern.org
|yes yes | ~/.emacs.d/org-tangle ~/<<username>>/README.org

tangle-damascus: tangle-README
|yes yes | ~/.emacs.d/org-tangle ~/<<username>>/damascus.aiern.org

tangle-README: tangle-setup
|yes yes | ~/.emacs.d/org-tangle ~/<<username>>/home/.emacs.d/README.org

tangle-libs: tangle-setup
|yes yes | find ~/<<username>>/home/.emacs.d/lib -name README.org -exec ~/.emacs.d/org-tangle "{}" \;

tangle-all: tangle tangle-README tangle-libs

setup: tangle-damascus copy

test:
|emacs ~/<<username>>/damascus.aiern.org

test-and-kill:
|-emacsclient -s test -e "(kill-emacs)"
|emacs ~/<<username>>/damascus.aiern.org --bg-daemon=test
|emacsclient -s test -e "(kill-emacs)"

emacs: setup test
emacs-and-kill: setup test-and-kill
i-have-to-do-this-twice: emacs-and-kill emacs-and-kill
supermax: tangle-all i-have-to-do-this-twice emacs
libemacs: tangle-libs emacs-and-kill emacs
#+end_src

*** lib
**** damascus.el

#+call: hash() :exports none

#+RESULTS:
: 20210616175359970389700

#+name: 20210616175359970389700
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; damascus.el --- a simple package                     -*- lexical-binding: t; -*-

;; Copyright (C) 2021  Jeet Ray

;; Author: Jeet Ray <aiern@protonmail.com>
;; Keywords: lisp
;; Version: 0.0.1

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Put a description of the package here

;;; Code:

;; code goes here

(provide 'damascus)
;;; damascus.el ends here
#+end_src

*** early-init.el

Adapted From: https://github.com/hlissner/doom-emacs/blob/develop/early-init.el

#+call: hash() :exports none

#+RESULTS:
: 20210604182053300746900

#+name: 20210604182053300746900
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; early-init.el -*- lexical-binding: t; -*-

;; Emacs 27.1 introduced early-init.el, which is run before init.el, before
;; package and UI initialization happens, and before site files are loaded.

;; A big contributor to startup times is garbage collection. We up the gc
;; threshold to temporarily prevent it from running, then reset it later by
;; enabling `gcmh-mode'. Not resetting it will cause stuttering/freezes.
(setq gc-cons-threshold most-positive-fixnum)

;; In noninteractive sessions, prioritize non-byte-compiled source files to
   ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)

;; Ensure Doom is running out of this file's directory
(setq user-emacs-directory (file-name-directory load-file-name))

(add-to-list 'load-path (concat user-emacs-directory "lib"))
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))
(setq custom-safe-themes t)

;; From: https://github.com/hartzell/straight.el/commit/882649137f73998d60741c7c8c993c7ebbe0f77a#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R1649
(setq straight-disable-byte-compilation (member "--no-byte-compilation" command-line-args))
(unless straight-disable-byte-compilation
    (byte-compile-file (concat user-emacs-directory "init.el") t)
    (byte-recompile-directory (concat user-emacs-directory "lib") nil t)
    (byte-recompile-directory (concat user-emacs-directory "themes") nil t))
#+end_src

*** init.el

#+call: hash() :exports none

#+RESULTS:
: 20210601225227507463400

#+name: 20210601225227507463400
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; $EMACSDIR/config.el -*- lexical-binding: t; -*-
(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
(straight-use-package 'leaf)
(straight-use-package 'leaf-keywords)

;; Adapted From: https://www.reddit.com/r/emacs/comments/caifq4/package_updates_with_straight/et99epi?utm_source=share&utm_medium=web2x&context=3
;; And: https://github.com/raxod502/straight.el#updating-recipe-repositories
(when (member "--update" command-line-args) (straight-pull-all)
(straight-merge-all)
(straight-freeze-versions))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; use-package
<<20210601225235077502200>>

;; keys
<<20210603105149525867500>>

;; hercules
<<20210601225307809867100>>

;; alamode
<<20210622004411529714900>>

;; ryo modal
<<20210601225309546041800>>

;; sorrow
<<20210624151540904695400>>

;; damascus
<<20210601225354262898500>>

;; modal-modes

;; aiern
<<20210613162401887306100>>

;; evil
<<20210601225311301844400>>

;; god mode
<<20210601225312959948800>>

;; xah-fly-keys
<<20210601225314671168300>>

;; objed
<<20210601225316366565400>>

;; kakoune
<<20210601225318002941000>>

;; modalka
<<20210601225319683820700>>

;; org-mode
<<20210601225236550932600>>

;; minibuffer
<<20210601225321180742600>>

;; git
<<20210601225324176915500>>

;; buffer
<<20210601225332587709700>>

;; terminal
<<20210601225334126963400>>

;; window manager
<<20210601225346472879400>>

;; system
<<20210601225349590264700>>

(when (> (length command-line-args) 2) (find-file (car (last command-line-args))))
#+end_src

**** use-package

#+call: hash() :exports none

#+RESULTS:
: 20210601225235077502200

#+name: 20210601225235077502200
#+begin_src emacs-lisp
;; <<20210601225231422834500>>

;; Adapted From: https://github.com/jwiegley/use-package#use-package-chords
;; Important: https://github.com/noctuid/general.el/issues/53#issuecomment-307262154
(use-package use-package-chords :demand t)

(use-package use-package-hydra
    :demand t
    :straight (use-package-hydra
        :type git
        :host gitlab
        :repo "picotech/use-package-hydra"
        :branch "master")
    :init (use-package hydra :demand t :custom (hydra-hint-display-type 'lv)))
(use-package use-package-deino
    :demand t
    :straight nil
    :load-path "lib/use-package-deino"
    :init (use-package use-package-extras :demand t :straight nil :load-path "lib/use-package-extras"))
#+end_src

***** always defer package loading

Quoted from [[Use-Package's Loading packages in sequence
][https://github.com/jwiegley/use-package#loading-packages-in-sequence]]:

#+begin_quote
NOTE: pay attention if you set use-package-always-defer to t, and also use the :after keyword, as you will need to specify how the
declared package is to be loaded: e.g., by some :bind. If you're not using one of the mechanisms that registers autoloads, such as
:bind or :hook, and your package manager does not provide autoloads, it's possible that without adding :defer 2 to those declarations,
your package will never be loaded.
#+end_quote

Quoted from [[Use-Package's Notes about lazy loading][https://github.com/jwiegley/use-package#notes-about-lazy-loading]]:

#+begin_quote
In almost all cases you don't need to manually specify :defer t. This is implied whenever :bind or :mode or :interpreter is used.
Typically, you only need to specify :defer if you know for a fact that some other package will do something to cause your package to
load at the appropriate time, and thus you would like to defer loading even though use-package isn't creating any autoloads for you.
You can override package deferral with the :demand keyword. Thus, even if you use :bind, using :demand will force loading to occur
immediately and not establish an autoload for the bound key.
#+end_quote

Quoted from [[Use-Package's Modes and interpreters][https://github.com/jwiegley/use-package#modes-and-interpreters]]:

#+begin_quote
Similar to :bind, you can use :mode and :interpreter to establish a deferred binding within the auto-mode-alist and interpreter-mode-alist variables.
...
If you aren't using :commands, :bind, :bind*, :bind-keymap, :bind-keymap*, :mode, :interpreter, or :hook
(all of which imply :defer; see the docstring for use-package for a brief description of each), you can still defer loading with the :defer keyword...
#+end_quote

Quoted from [[Use-Package's Magic handlers][https://github.com/jwiegley/use-package#magic-handlers]]:

#+begin_quote
Similar to :mode and :interpreter, you can also use :magic and :magic-fallback to cause certain function to be run if the beginning of a file matches
a given regular expression.
...
This registers an autoloaded command for pdf-view-mode, defers loading of pdf-tools, and runs pdf-view-mode if the beginning of a buffer matches the string "%PDF".
#+end_quote

Quoted from [[RYO-Modal's Use-package keyword][https://github.com/Kungsgeten/ryo-modal#use-package-keyword]]:

#+begin_quote
Ryo-modal also provides a use-package keyword: :ryo, which is similar to :bind in that it implies :defer t and create autoloads for the bound commands.
The keyword is followed by one or more key-binding commands, using the same syntax as used by ryo-modal-keys...
#+end_quote

Quoted from [[General's Use-package Keywords][https://github.com/noctuid/general.el#use-package-keywords]]:

#+begin_quote
:general is similar to :bind in that it implies :defer t whenever there are bound commands that can be autoloaded
(e.g. it will not imply :defer t if the only bound command is to a lambda, for example). Whenever autoloadable commands are bound,
use-package will create autoloads for them (though this is usually not necessary).
#+end_quote

Quoted from [[General's :ghook Keyword][https://github.com/noctuid/general.el#ghook-keyword]]:

#+begin_quote
:ghook is intended to be used to add a package’s minor mode enabling function to a user-specified hook, so that when hook is run,
the package will be loaded and the mode enabled. This means that :ghook will usually imply :defer t. While it does not always imply :defer t,
it will add any non-lambda functions to :commands (this is the same behavior as :hook).
Though this is usually unnecessary (the commands probably already have autoloads), it will in turn imply :defer t.
#+end_quote

Quoted from [[General's :gfhook Keyword][https://github.com/noctuid/general.el#gfhook-keyword]]:

#+begin_quote
Unlike :ghook, :gfhook never adds functions to :commands and therefore never implies :defer t.
This is because the functions specified are ones that should be run when turning on (or toggling) the mode(s) the package provides.
The specified functions are external to the package, could be called elsewhere, and therefore should not trigger the package to load.
#+end_quote

Also see [[this comment][https://github.com/jwiegley/use-package/issues/738#issuecomment-447631609]].

Note that I assume that [[chords][https://github.com/jwiegley/use-package#use-package-chords]] also defer and create autoloads.

And in my experience... Not a good idea; much too confusing. Use
[[the arguments here][https://www.reddit.com/r/emacs/comments/j2xezg/usepackage_best_practices/]] to decide whether to use this or =:defer <n>= instead.

#+call: hash() :exports none

#+RESULTS:
: 20210601225231422834500

#+name: 20210601225231422834500
#+begin_src emacs-lisp
(setq use-package-always-defer t)
#+end_src

**** keys

#+call: hash() :exports none

#+RESULTS:
: 20210603105149525867500

#+name: 20210603105149525867500
#+begin_src emacs-lisp
(use-package alloy
    :straight nil
    :load-path "lib/alloy"
    :demand t
    :use-package-preconfig (command-log-mode)
    :load-emacs-file-preconfig ("naked")
    :config
        (alloy-auto-unbind-keys)
        (alloy-def :keymaps '(override
            aiern-insert-state-map
            aiern-normal-state-map
            evil-insert-state-map
            evil-normal-state-map)
            ;; Adapted From:
            ;; Answer: https://stackoverflow.com/a/4557027/10827766
            ;; User: https://stackoverflow.com/users/387076/gilles-so-stop-being-evil
            "\eOA" [up]
            "\e[A" [up]
            "\eOB" [down]
            "\e[B" [down]
            "\eOD" [left]
            "\e[D" [left]
            "\eOC" [right]
            "\e[C" [right])
        (alloy-def :keymaps '(
                minibuffer-local-map
                counsel-describe-map
                helm-buffer-map)
            "M-x" 'exit-minibuffer)
    :custom (alloy-implicit-kbd t))
#+end_src

**** modal modes
***** hercules

#+call: hash() :exports none

#+RESULTS:
: 20210601225307809867100

#+name: 20210601225307809867100
#+begin_src emacs-lisp
(use-package hercules
    :straight (hercules :type git :host gitlab :repo "jjzmajic/hercules.el" :branch "master")
    :use-package-postconfig (dash) (s)
        (meq :straight nil :load-path "lib/meq" :demand t)
        (deino :demand t :straight nil :load-path "lib/deino" :gsetq (deino-hint-display-type 'lv))
        (lode :demand t :straight nil :load-path "lib/lode")
    :demand t
    :demon
        ((alloy-chord "\\\\") 'meq/toggle-which-key)
        ((alloy-chord "\\]") 'map-of-infinity/body)
    :deino (map-of-infinity (:color blue)
            ("`" nil "cancel")
            ("w" deino/which-key/body "which-key")
            ("h" deino/hercules/body "hercules")
            ("d" meq/disable-all-modal-modes "disable all modal modes")
            ("t" toggles/body "toggles")
            ("k" all-keymaps/body "all keymaps"))
        (deino/which-key (:color blue)
            ("`" nil "cancel")
            ("a" meq/any-popup-showing-p "any popup showing")
            ("h" meq/which-key--hide-popup "hide-popup")
            ("s" meq/which-key--show-popup "show-popup")
            ("r" meq/which-key--refresh-popup "refresh-popup")
            ("t" meq/toggle-which-key "toggle")
            ("l" meq/which-key-show-top-level "meq/toplevel")
            ("L" which-key-show-top-level "toplevel"))
        (deino/hercules (:color blue)
            ("`" nil "cancel")
            ("h" meq/hercules-hide-all-modal-modes "hide all modal modes"))
        (toggles (:color blue) ("`" nil "cancel"))
        (all-keymaps (:color blue) ("`" nil "cancel"))
    :gsetq
        (which-key-enable-extended-define-key t)
        (which-key-idle-delay 0.1)
        (which-key-idle-secondary-delay nil)
        (which-key-allow-evil-operators t)

        ;; NOTE: This will cause the which-key maps for the operator states to show up,
        ;; breaking functionality such as `d 13 <arrow-down>', etc.
        ;; (which-key-show-operator-state-maps t)

        ;; TODO: Choose a fun one!
        (which-key-separator " × ")
        ;; (which-key-separator " |-> ")

        (which-key-popup-type 'side-window)
        (which-key-side-window-location '(right bottom left top))

        ;; If this percentage is too small, the keybindings frame will appear at the bottom
        (which-key-side-window-max-width 0.5)
        
        (which-key-side-window-max-height 0.25))
#+end_src

***** alamode

#+call: hash() :exports none

#+RESULTS:
: 20210622004411529714900

#+name: 20210622004411529714900
#+begin_src emacs-lisp
(use-package alamode :demand t :straight nil :load-path "lib/alamode")
#+end_src

***** ryo modal

#+call: hash() :exports none

#+RESULTS:
: 20210601225309546041800

#+name: 20210601225309546041800
#+begin_src emacs-lisp
(use-package ryo-modal
    :straight (ryo-modal :type git :host github :repo "kungsgeten/ryo-modal" :branch "master")
    :demand t
    :demon
        ((alloy-chord "  ") 'meq/toggle-ryo-hercules)
        ((alloy-chord " ,") 'meq/ryo-execute-with-current-bindings)
    :config ;; From: https://github.com/Kungsgeten/ryo-modal#which-key-integration
        (push '((nil . "ryo:.*:") . (nil . "")) which-key-replacement-alist))
#+end_src

***** sorrow

#+call: hash() :exports none

#+RESULTS:
: 20210624151540904695400

#+name: 
#+begin_src emacs-lisp
(use-package sorrow
    :demand t
    :straight nil
    :load-path "lib/sorrow"
    :demon
        ((alloy-chord " .") 'meq/toggle-ryo-hercules)
        ((alloy-chord " /") 'meq/ryo-execute-with-current-bindings)
    :config ;; From: https://github.com/shadowrylander/sorrow#which-key-integration
        (push '((nil . "sorrow:.*:") . (nil . "")) which-key-replacement-alist))
#+end_src

***** evil

#+call: hash() :exports none

#+RESULTS:
: 20210601225311301844400

#+name: 20210601225311301844400
#+begin_src emacs-lisp
(use-package evil
    :demand t
    :use-package-preconfig (bind-map)
    :use-package-postconfig
        ;; Adapted From: https://github.com/mohsenil85/evil-evilified-state and
        ;; https://github.com/syl20bnr/spacemacs
        (evil-evilified-state
            :after evil
            :straight (evil-evilified-state
                :type git
                :host github
                :repo "<<username>>/evil-evilified-state"
                :branch "master"))
    :gsetq (evil-escape-key-sequence nil)
    :demon
        ((alloy-chord "kk") 'meq/toggle-evil)
        ((alloy-chord "KK") 'meq/toggle-evil-force)
        
        ;; TODO
        ;; ((alloy-chord "") 'meq/toggle-evil-ex-hercules)
        ;; ((alloy-chord "") 'meq/toggle-evil-ex-hercules-force)
        
        ((alloy-chord ",,") 'evil-ex)
    :leaf (evil :advice
        (:override evil-insert-state (lambda (&optional _) (interactive)
            (meq/disable-all-modal-modes))))
    :config
        ;; From: https://www.reddit.com/r/emacs/comments/lp45zd/help_requested_in_configuring_ryomodal/gp3rfx9?utm_source=share&utm_medium=web2x&context=3
        ;; Kept for documentation porpoises
        ;; (eval
        ;;       `(ryo-modal-keys
        ;;             ("l l" ,(alloy-simulate-key ":wq <RET>") :first '(evil-normal-state) :name "wq")
        ;;             ("l p" ,(alloy-simulate-key ":q <RET>") :first '(evil-normal-state) :name "q")
        ;;             ("l o" ,(alloy-simulate-key ":w <RET>") :first '(evil-normal-state) :name "w")
        ;;             ("l q" ,(alloy-simulate-key ":q! <RET>") :first '(evil-normal-state) :name "q!")))

        ;; Use to get command name:
        ;; Eg: (cdr (assoc "q" evil-ex-commands))
        ;; Then "C-x C-e" (eval-last-sexp)

        ;; TODO: How do I create a keymap `evil-ex-keymap' out of the `evil-ex-commands' alist?

        ;; (hercules-def :show-funs #'meq/evil-ex-hercules-show
        ;;     :hide-funs #'meq/evil-ex-hercules-hide
        ;;     :toggle-funs #'meq/evil-ex-hercules-toggle
        ;;     :keymap 'evil-ex-keymap
        ;;     ;; :transient t
        ;; )

        ;; (defun meq/evil-ex-hercules-toggle nil (interactive))
        ;; (defun meq/evil-ex-show-top-level nil (interactive)
        ;;     (meq/which-key-show-top-level 'evil-ex-keymap))

        ;; (defun meq/toggle-evil-ex nil (interactive)
        ;;     (funcall 'meq/toggle-inner 'evil-mode "evil-ex" (meq/fbatp evil-mode) 'evil-ex-keymap))
        ;; (defun meq/toggle-evil-ex-force nil (interactive)
        ;;     (funcall 'meq/toggle-inner 'evil-mode "evil-ex" (meq/fbatp evil-mode) 'evil-ex-keymap nil t))
        ;; (defun meq/toggle-evil-ex-hercules nil (interactive)
        ;;     (funcall 'meq/toggle-inner 'evil-mode "evil-ex" (meq/fbatp evil-mode) 'evil-ex-keymap t))
        ;; (defun meq/toggle-evil-ex-hercules-force nil (interactive)
        ;;     (funcall 'meq/toggle-inner 'evil-mode "evil-ex" (meq/fbatp evil-mode) 'evil-ex-keymap t t))
    :ryo
        ("l" :hydra
                '(evil-exits (:color blue)
                    ;; From: https://github.com/emacs-evil/evil/blob/master/evil-maps.el#L449
                    "A deino for getting the fuck outta' here!"
                    ("`" nil "cancel")
                    ("l" evil-save-and-quit ":wq")
                    ("p" evil-quit ":q")
                    ("o" evil-write ":w")
                    ("O" evil-write-all ":wa")
                    ;; ("q" (funcall (alloy-simulate-key ":q! <RET>")) ":q!"))
                    ("q" (funcall (evil-quit t)) ":q!"))
                :name "evil exits"))
#+end_src

***** aiern

#+call: hash() :exports none

#+RESULTS:
: 20210613162401887306100

#+name: 20210613162401887306100
#+begin_src emacs-lisp
(use-package aiern
    :demand t
    :use-package-preconfig (bind-map)
    :straight nil
    :load-path "lib/aiern"
    :demon
        ((alloy-chord "uu") 'meq/toggle-aiern)
        ((alloy-chord "UU") 'meq/toggle-aiern-force)

        ;; TODO
        ;; ((alloy-chord "") 'meq/toggle-aiern-ex-hercules)
        ;; ((alloy-chord "") 'meq/toggle-aiern-ex-hercules-force)

        ((alloy-chord ",.") 'aiern-ex)
        ((alloy-chord ",/") 'meq/aiern-execute-with-current-bindings)
    :config
        (alloy-def :keymaps '(override aiern-insert-state-map)
            (naked "RET") 'newline-and-indent
            (alloy-chord "]\\") 'meq/end-of-line-and-indented-new-line)
        ;; TODO: How do I create a keymap `aiern-ex-keymap' out of the `aiern-ex-commands' alist?

        ;; (hercules-def :show-funs #'meq/aiern-ex-hercules-show
        ;;     :hide-funs #'meq/aiern-ex-hercules-hide
        ;;     :toggle-funs #'meq/aiern-ex-hercules-toggle
        ;;     :keymap 'aiern-ex-keymap
        ;;     ;; :transient t
        ;; )

        ;; (defun meq/aiern-ex-hercules-toggle nil (interactive))
        ;; (defun meq/aiern-ex-show-top-level nil (interactive)
        ;;     (meq/which-key-show-top-level 'aiern-ex-keymap))

        ;; (defun meq/toggle-aiern-ex nil (interactive)
        ;;     (funcall 'meq/toggle-inner 'aiern-mode "aiern-ex" (meq/fbatp aiern-mode) 'aiern-ex-keymap))
        ;; (defun meq/toggle-aiern-ex-force nil (interactive)
        ;;     (funcall 'meq/toggle-inner 'aiern-mode "aiern-ex" (meq/fbatp aiern-mode) 'aiern-ex-keymap nil t))
        ;; (defun meq/toggle-aiern-ex-hercules nil (interactive)
        ;;     (funcall 'meq/toggle-inner 'aiern-mode "aiern-ex" (meq/fbatp aiern-mode) 'aiern-ex-keymap t))
        ;; (defun meq/toggle-aiern-ex-hercules-force nil (interactive)
        ;;     (funcall 'meq/toggle-inner 'aiern-mode "aiern-ex" (meq/fbatp aiern-mode) 'aiern-ex-keymap t t))
        )
#+end_src

***** god mode

#+call: hash() :exports none

#+RESULTS:
: 20210601225312959948800

#+name: 20210601225312959948800
#+begin_src emacs-lisp
(use-package god-mode
    :demand t
    :use-package-postconfig
        (aiern-god-state :straight nil :load-path "lib/aiern-god-state" :demand t)
        (evil-god-state :demand t :straight (evil-god-state
            :type git
            :host github
            :repo "gridaphobe/evil-god-state"
            :branch "master"))
    :demon
        ((alloy-chord "jj") 'meq/toggle-god)
        ((alloy-chord ";'") 'god-execute-with-current-bindings)
    :config (which-key-enable-god-mode-support))
#+end_src

***** xah-fly-keys

#+call: hash() :exports none

#+RESULTS:
: 20210601225314671168300

#+name: 20210601225314671168300
#+begin_src emacs-lisp
(use-package xah-fly-keys
    :ryo
        ("m" :hydra
            '(modal-modes (:color blue)
                "A modal deino!"
                ("`" nil "cancel")
                ("x" meq/toggle-xah "xah-fly-keys")) :name "modal modes"))
#+end_src

***** objed

#+call: hash() :exports none

#+RESULTS:
: 20210601225316366565400

#+name: 20210601225316366565400
#+begin_src emacs-lisp
(use-package objed
    :demon ((alloy-chord "ii") 'meq/toggle-objed))
#+end_src

***** kakoune

#+call: hash() :exports none

#+RESULTS:
: 20210601225318002941000

#+name: 20210601225318002941000
#+begin_src emacs-lisp
(use-package kakoune :deino+ (modal-modes (:color blue) ("k" meq/toggle-kakoune-hercules "kakoune")))
#+end_src

***** modalka

#+call: hash() :exports none

#+RESULTS:
: 20210601225319683820700

#+name: 20210601225319683820700
#+begin_src emacs-lisp
(use-package modalka :demon ((alloy-chord "::") 'meq/toggle-modalka-hercules))
#+end_src

**** org-mode

#+call: hash() :exports none

#+RESULTS:
: 20210601225236550932600

#+name: 20210601225236550932600
#+begin_src emacs-lisp
(use-package outshine :hook ((outline-mode prog-mode text-mode org-mode) . outshine-mode))
(use-package org
    :use-package-postconfig
        (nix-mode
            :demand t
           
            :commands (org-babel-execute:nix)
            :mode ("\\.nix\\'")
            :init/defun*
                ;; Adapted From:
                ;; Answer: https://emacs.stackexchange.com/a/61442
                ;; User: https://emacs.stackexchange.com/users/20061/zeta
                (org-babel-execute:nix (body params)
                    "Execute a block of Nix code with org-babel."
                    (message "executing Nix source code block")
                    (let ((in-file (org-babel-temp-file "n" ".nix"))
                        (json (or (cdr (assoc :json params)) nil))
                        (opts (or (cdr (assoc :opts params)) nil))
                        (args (or (cdr (assoc :args params)) nil))
                        (read-write-mode (or (cdr (assoc :read-write-mode params)) nil))
                        (eval (or (cdr (assoc :eval params)) nil))
                        (show-trace (or (cdr (assoc :show-trace params)) nil)))
                    (with-temp-file in-file
                        (insert body))
                    (org-babel-eval
                        (format "nix-instantiate %s %s %s %s %s %s %s"
                            (if (xor (eq json nil) (<= json 0)) "" "--json")
                            (if (xor (eq show-trace nil) (<= show-trace 0)) "" "--show-trace")
                            (if (xor (eq read-write-mode nil) (<= read-write-mode 0)) "" "--read-write-mode")
                            (if (xor (eq eval nil) (<= eval 0)) "" "--eval")
                            (if (eq opts nil) "" opts)
                            (if (eq args nil) "" args)
                            (org-babel-process-file-name in-file))
                    ""))))
        (xonsh-mode
            :demand t
            :straight (xonsh-mode :type git :host github :repo "seanfarley/xonsh-mode" :branch "master")
            :commands (org-babel-execute:xonsh org-babel-expand-body:xonsh)
            :mode ("\\.xonshrc\\'" "\\.xsh\\'")
            :init/defun*
                ;; Adapted From:
                ;; Answer: https://emacs.stackexchange.com/a/61442
                ;; User: https://emacs.stackexchange.com/users/20061/zeta
                (org-babel-execute:xonsh (body params)
                    "Execute a block of Xonsh code with org-babel."
                    (message "executing Xonsh source code block")
                    (let ((in-file (org-babel-temp-file "x" ".xsh"))
                        (opts (or (cdr (assoc :opts params)) nil))
                        (args (or (cdr (assoc :args params)) nil)))
                    (with-temp-file in-file
                        (insert body))
                    (org-babel-eval
                        (format "xonsh %s %s %s"
                            (if (eq opts nil) "" opts)
                            (if (eq args nil) "" args)
                            (org-babel-process-file-name in-file))
                    ""))))
        (dockerfile-mode :demand t :mode ("\\Dockerfile\\'"))
        (vimrc-mode
            :demand t
            :straight (vimrc-mode :type git :host github :repo "mcandre/vimrc-mode" :branch "master")
            :commands
                (org-babel-execute:vimrc
                org-babel-expand-body:vimrc)
            :mode "\\.vim\\(rc\\)?\\'")
    :config
        (org-babel-do-load-languages 'org-babel-load-languages
            (append org-babel-load-languages
            '((python . t)
            (shell . t))))
        (org-babel-lob-ingest "./README.org")

        <<20210601225401786848500>>
    ;; :demon ((naked "backtab") 'evil-close-fold)
    :ryo ("o" :hydra
        '(deino-org (:color blue)
                "A deino for org-mode!"
                ("o" org-babel-tangle "tangle")
                ("a" meq/org-babel-tangle-append "tangle append")
                ("f" org-babel-tangle-file "tangle file")
                ("n" meq/narrow-or-widen-dwim "narrow")
                ("s" org-edit-special "org edit special")
                ("q" nil "cancel")))
    :gsetq
        ;; I'm using ox-pandoc
        ;; (org-export-backends '(md gfm latex odt org))
        (org-directory "/tmp")
        (org-roam-directory org-directory)
        (org-descriptive-links t)
        (org-confirm-babel-evaluate nil)
        (org-startup-folded t)
        (org-src-fontify-natively t)
        ;; (org-src-window-setup 'current-window)
        (org-cycle-emulate-tab 'whitestart))
(use-package org-pandoc-import
    :use-package-preconfig (ox-gfm) (ox-pandoc)
    :hook (after-init . org-pandoc-import-transient-mode)
    :straight (org-pandoc-import
        :type git
        :host github
        :repo "tecosaur/org-pandoc-import"
        :files ("*.el" "filters" "preprocessors")))
#+end_src

**** minibuffer

#+call: hash() :exports none

#+RESULTS:
: 20210601225321180742600

#+name: 20210601225321180742600
#+begin_src emacs-lisp
<<20210624171113086324000>>

<<20210601225322706724000>>

;; TODO: Split this into multiple `use-package!' instances using my new `deino+' keyword
(with-eval-after-load 'ryo-modal (ryo-modal-key "x" :hydra
      '(deino-execute (:color blue)
            "A deino for launching stuff!"
            ("c" counsel-M-x "counsel")
            ("h" helm-smex-major-mode-commands "helm smex major mode")
            ("s" helm-smex "helm smex")
            ("e" execute-extended-command "M-x")
            ("q" nil "cancel"))
            :name "execute order 65"))
#+end_src

***** ivy

#+call: hash() :exports none

#+RESULTS:
: 20210624171113086324000

#+name: 20210624171113086324000
#+begin_src emacs-lisp
(use-package ivy :hook ((emacs-startup . counsel-mode) (emacs-startup . ivy-mode)))
#+end_src

***** helm

#+call: hash() :exports none

#+RESULTS:
: 20210601225322706724000

#+name: 20210601225322706724000
#+begin_src emacs-lisp
(use-package helm
    :use-package-postconfig ;; Adapted From: https://github.com/clemera/helm-ido-like-guide
        (helm-swoop)
        (helm-flx)
        (smex)
        (helm-smex)
        (helm-ido-like
            :straight (helm-ido-like
                :type git
                :host github
                :repo "<<username>>/helm-ido-like-guide"
                :branch "master")
            :hook after-init
            :after
                (helm-swoop
                helm-flx
                helm-fuzzier
                helm-smex
                smex
                dash)))
#+end_src

**** git

#+call: hash() :exports none

#+RESULTS:
: 20210601225324176915500

#+name: 20210601225324176915500
#+begin_src emacs-lisp
<<20210601225325712716200>>
<<20210601225327334456900>>
;; (use-package! gitattributes-mode)
#+end_src

***** git-gutter

#+call: hash() :exports none

#+RESULTS:
: 20210601225325712716200

#+name: 20210601225325712716200
#+begin_src emacs-lisp
(use-package git-gutter
    :ryo ("g" :hydra
        '(deino-git nil
            "A deino for git!"
            ("`" nil "cancel" :color blue)
            ("j" git-gutter:next-hunk "next")
            ("k" git-gutter:previous-hunk "previous")
            ("d" git-gutter:popup-hunk "diff")
            ("s" git-gutter:stage-hunk "stage")
            ("r" git-gutter:revert-hunk "revert")
            ("m" git-gutter:mark-hunk "mark"))))
#+end_src

***** magit

#+call: hash() :exports none

#+RESULTS:
: 20210601225327334456900

#+name: 20210601225327334456900
#+begin_src emacs-lisp
(use-package magit
    :ryo ("g" :hydra+
        '(deino-git nil
            "A deino for git!"
            ("g" magit-status "magit" :color blue))))
#+end_src

**** buffer

#+call: hash() :exports none

#+RESULTS:
: 20210601225332587709700

#+name: 20210601225332587709700
#+begin_src emacs-lisp
(defun display-startup-echo-area-message nil (meq/which-key-show-top-level))

(use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))

;; Adapted From: https://github.com/seagle0128/doom-aiern-modeline#customize
(use-package doom-aiern-modeline
    :straight nil
    :load-path "lib/doom-aiern-modeline"
    :hook (after-init . doom-aiern-modeline-mode)
    :use-package-preconfig
        (all-the-icons)
        (shrink-path)
    :gsetq
        ;; How tall the mode-line should be. It's only respected in GUI.
        ;; If the actual char height is larger, it respects the actual height.
        (doom-aiern-modeline-height 25)

        ;; How wide the mode-line bar should be. It's only respected in GUI.
        (doom-aiern-modeline-bar-width 3)

        ;; The limit of the window width.
        ;; If `window-width' is smaller than the limit, some information won't be displayed.
        (doom-aiern-modeline-window-width-limit fill-column)

        ;; How to detect the project root.
        ;; The default priority of detection is `ffip' > `projectile' > `project'.
        ;; nil means to use `default-directory'.
        ;; The project management packages have some issues on detecting project root.
        ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
        ;; to hanle sub-projects.
        ;; You can specify one if you encounter the issue.
        (doom-aiern-modeline-project-detection 'project)

        ;; Determines the style used by `doom-aiern-modeline-buffer-file-name'.
        ;;
        ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
        ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
        ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
        ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
        ;;   truncate-with-project => emacs/l/comint.el
        ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
        ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
        ;;   truncate-all => ~/P/F/e/l/comint.el
        ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
        ;;   relative-from-project => emacs/lisp/comint.el
        ;;   relative-to-project => lisp/comint.el
        ;;   file-name => comint.el
        ;;   buffer-name => comint.el<2> (uniquify buffer name)
        ;;
        ;; If you are experiencing the laggy issue, especially while editing remote files
        ;; with tramp, please try `file-name' style.
        ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
        (doom-aiern-modeline-buffer-file-name-style 'auto)

        ;; Whether display icons in the mode-line.
        ;; While using the server mode in GUI, should set the value explicitly.
        (doom-aiern-modeline-icon (display-graphic-p))

        ;; Whether display the icon for `major-mode'. It respects `doom-aiern-modeline-icon'.
        (doom-aiern-modeline-major-mode-icon t)

        ;; Whether display the colorful icon for `major-mode'.
        ;; It respects `all-the-icons-color-icons'.
        (doom-aiern-modeline-major-mode-color-icon t)

        ;; Whether display the icon for the buffer state. It respects `doom-aiern-modeline-icon'.
        (doom-aiern-modeline-buffer-state-icon t)

        ;; Whether display the modification icon for the buffer.
        ;; It respects `doom-aiern-modeline-icon' and `doom-aiern-modeline-buffer-state-icon'.
        (doom-aiern-modeline-buffer-modification-icon t)

        ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
        (doom-aiern-modeline-unicode-fallback nil)

        ;; Whether display the minor modes in the mode-line.
        (doom-aiern-modeline-minor-modes nil)

        ;; If non-nil, a word count will be added to the selection-info modeline segment.
        (doom-aiern-modeline-enable-word-count nil)

        ;; Major modes in which to display word count continuously.
        ;; Also applies to any derived modes. Respects `doom-aiern-modeline-enable-word-count'.
        ;; If it brings the sluggish issue, disable `doom-aiern-modeline-enable-word-count' or
        ;; remove the modes from `doom-aiern-modeline-continuous-word-count-modes'.
        (doom-aiern-modeline-continuous-word-count-modes '(
            markdown-mode
            gfm-mode
            org-mode
            outline-mode))

        ;; Whether display the buffer encoding.
        (doom-aiern-modeline-buffer-encoding t)

        ;; Whether display the indentation information.
        (doom-aiern-modeline-indent-info nil)

        ;; If non-nil, only display one number for checker information if applicable.
        (doom-aiern-modeline-checker-simple-format t)

        ;; The maximum number displayed for notifications.
        (doom-aiern-modeline-number-limit 99)

        ;; The maximum displayed length of the branch name of version control.
        (doom-aiern-modeline-vcs-max-length 12)

        ;; Whether display the workspace name. Non-nil to display in the mode-line.
        (doom-aiern-modeline-workspace-name t)

        ;; Whether display the perspective name. Non-nil to display in the mode-line.
        (doom-aiern-modeline-persp-name t)

        ;; If non nil the default perspective name is displayed in the mode-line.
        (doom-aiern-modeline-display-default-persp-name nil)

        ;; If non nil the perspective name is displayed alongside a folder icon.
        (doom-aiern-modeline-persp-icon t)

        ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
        (doom-aiern-modeline-lsp t)

        ;; Whether display the GitHub notifications. It requires `ghub' package.
        (doom-aiern-modeline-github nil)

        ;; The interval of checking GitHub.
        (doom-aiern-modeline-github-interval (* 30 60))

        ;; Whether display the modal state icon.
        ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
        (doom-aiern-modeline-modal-icon t)

        ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
        (doom-aiern-modeline-mu4e nil)

        ;; Whether display the gnus notifications.
        (doom-aiern-modeline-gnus t)

        ;; Wheter gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
        (doom-aiern-modeline-gnus-timer 2)

        ;; Wheter groups should be excludede when gnus automatically being updated.
        (doom-aiern-modeline-gnus-excluded-groups '("dummy.group"))

        ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
        (doom-aiern-modeline-irc t)

        ;; Function to stylize the irc buffer names.
        (doom-aiern-modeline-irc-stylize 'identity)

        ;; Whether display the environment version.
        (doom-aiern-modeline-env-version t)
        ;; Or for individual languages
        (doom-aiern-modeline-env-enable-python t)
        (doom-aiern-modeline-env-enable-ruby t)
        (doom-aiern-modeline-env-enable-perl t)
        (doom-aiern-modeline-env-enable-go t)
        (doom-aiern-modeline-env-enable-elixir t)
        (doom-aiern-modeline-env-enable-rust t)

        ;; Change the executables to use for the language version string
        (doom-aiern-modeline-env-python-executable "python") ; or `python-shell-interpreter'
        (doom-aiern-modeline-env-ruby-executable "ruby")
        (doom-aiern-modeline-env-perl-executable "perl")
        (doom-aiern-modeline-env-go-executable "go")
        (doom-aiern-modeline-env-elixir-executable "iex")
        (doom-aiern-modeline-env-rust-executable "rustc")

        ;; What to dispaly as the version while a new one is being loaded
        (doom-aiern-modeline-env-load-string "...")

        ;; Hooks that run before/after the modeline version string is updated
        (doom-aiern-modeline-before-update-env-hook nil)
        (doom-aiern-modeline-after-update-env-hook nil))

(use-package writeroom-mode
    :hook emacs-startup
    :demon ((alloy-chord "zz") 'writeroom-mode)
    :gsetq
        (writeroom-fullscreen-effect t)
        (writeroom-fringes-outside-margins t)
        (writeroom-width 0.75)
        (writeroom-mode-line t))

(use-package focus
    :hook (emacs-startup . focus-mode)
    :gsetq
        (focus-mode-to-thing '(
            ;; (prog-mode . defun)
            (prog-mode . line)
            ;; (text-mode . sentence)
            (text-mode . line)
            (outline-mode . line))))

(use-package yankpad
    :use-package-preconfig
        (projectile)
        (yasnippet)
        (company)
    :init/defun* (meq/yankpad-hercules-toggle nil (interactive))
    :gsetq (yankpad-file "./yankpad.org")
    :demon
        ((alloy-chord "[[") 'meq/yankpad-hercules-toggle)
        ((alloy-chord "]]") 'yankpad-expand)
    :config (yankpad-map)
    :hercules
        (:show-funs #'meq/yankpad-hercules-show
            :hide-funs #'meq/yankpad-hercules-hide
            :toggle-funs #'meq/yankpad-hercules-toggle
            :keymap 'yankpad-keymap
            ;; :transient t
        ))

(use-package vlf
    :straight (vlf :type git :host github :repo "m00natic/vlfi" :branch "master")
    :demand t
    :gsetq (vlf-application 'always))

;; !!! THE ORDER HERE MATTERS! !!!
;; (add-hook 'emacs-startup '(lambda nil (interactive)
;;     (use-package oneonone
;;         :demand t
;;         :load-emacs-file-preconfig
;;             ("fit-frame")
;;             ("autofit-frame")
;;             ;; ("buff-menu+")
;;             ("compile-")
;;             ("compile+")
;;             ("grep+")
;;             ("dired+")
;;             ("dired-details")
;;             ("dired-details+")
;;             ("doremi")
;;             ("hexrgb")
;;             ("frame-fns")
;;             ("faces+")
;;             ("doremi-frm")
;;             ("eyedropper")
;;             ("facemenu+")
;;             ("frame+")
;;             ("help+")
;;             ("info+")
;;             ("menu-bar+")
;;             ("mouse+")
;;             ("setup-keys")
;;             ("strings")
;;             ;; ("simple+")
;;             ("frame-cmds")
;;             ("thumb-frm")
;;             ("window+")
;;             ("zoom-frm")
;;             ("oneonone")
;;         :gsetq
;;             (1on1-minibuffer-frame-width 10000)
;;             (1on1-minibuffer-frame-height 10000))))
#+end_src

**** terminal

#+call: hash() :exports none

#+RESULTS:
: 20210601225334126963400

#+name: 20210601225334126963400
#+begin_src emacs-lisp
;; <<20210601225337340164800>>

;; (ansi-term-color-vector [unspecified "white" "red" "green" "yellow" "royal blue" "magenta" "cyan" "white"] t)
;; (ansi-color-names-vector [unspecified "white" "red" "green" "yellow" "royal blue" "magenta" "cyan" "white"] t)
(load-emacs-file "fringe")
;; (with-eval-after-load 'fringe-mode (fringe-mode (quote (1 . 1)) nil (fringe)))
(with-eval-after-load 'fringe-mode (fringe-mode 'none))

;; <<20210601225339037191900>>

<<20210601225340625970700>>

;; NOTE: Not working
<<20210601225342116066300>>

;; <<20210601225343633878500>>

<<20210601225345097323100>>

#+end_src

***** term

#+call: hash() :exports none

#+RESULTS:
: 20210601225337340164800

#+name: 20210601225337340164800
#+begin_src emacs-lisp
(use-package term
    :config/defun* (meq/term-hercules-toggle nil (interactive))
    :alloy
        (:keymaps 'term-mode-map
            "C-c C-c" 'term-interrupt-subjob
            "C-m"     'term-send-raw
            "C-S-c"   'term-interrupt-subjob
            "M-,"     'term-send-input
            "M-b"     'term-send-backward-word
            "M-d"     'term-send-forward-kill-word
            "M-DEL"   'term-send-backward-kill-word
            "M-f"     'term-send-forward-word
            "M-o"     'term-send-backspace)
    :gsetq
        (term-unbind-key-list '("C-z" "C-x" "C-c" "C-h" "C-l" "<ESC>"))
        (term-buffer-maximum-size 16384)
        (term-default-bg-color "#000000") '(term-default-fg-color "#AAAAAA")
    :hercules
        (:show-funs #'meq/term-hercules-show
        :hide-funs #'meq/term-hercules-hide
        :toggle-funs #'meq/term-hercules-toggle
        :keymap 'term-raw-map
        ;; :transient t
        ))
#+end_src

***** vterm

#+call: hash() :exports none

#+RESULTS:
: 20210601225339037191900

#+name: 20210601225339037191900
#+begin_src emacs-lisp
(use-package vterm
    :gsetq
        (vterm-shell "/usr/bin/env xonsh")
        (vterm-always-compile-module t)
        (vterm-kill-buffer-on-exit t))
#+end_src

***** multi-term

#+call: hash() :exports none

#+RESULTS:
: 20210601225340625970700

#+name: 20210601225340625970700
#+begin_src emacs-lisp
(use-package multi-term
    :gsetq
        (multi-term-program "/usr/bin/env xonsh")
        (multi-term-scroll-show-maximum-output t))
#+end_src

***** emux

Mostly from [[Emux's After Installing Section][https://github.com/re5et/emux#after-installing]]:

#+call: hash() :exports none

#+RESULTS:
: 20210601225342116066300

#+name: 20210601225342116066300
#+begin_src emacs-lisp
(use-package emux
    ;; :straight (emux :type git :host github :repo "re5et/emux" :branch "master")
    :load-emacs-file-preconfig
        ("emux/emux-base")
        ("emux/emux-term")
        ("emux/emux-screen")
        ("emux/emux-session")
    :config/defun*
        (meq/make-frame nil (interactive) (modify-frame-parameters (make-frame) ((name . "emux"))))
        (meq/select-emux nil (interactive) (select-frame-by-name "emux"))
    :config (emux-completing-read-command (quote ido-completing-read))
    :demon
        ;; (""          'meq/make-frame)
        ;; (""          'meq/select-emux)
        ("C-x c"     'emux-term-create)
        ("C-x P"     'emux-session-load-template)
    :alloy
        (:keymaps 'term-mode-map
            "C-S-p"     'previous-line
            "C-S-r"     'isearch-backward
            "C-S-s"     'isearch-forward
            "C-S-y"     'emux-term-yank
            "C-x -"     'emux-term-vsplit
            "C-x |"     'emux-term-hsplit
            "C-x B"     'emux-jump-to-buffer
            "C-x C-S-k" 'emux-session-destroy
            "C-x C"     'emux-screen-create
            "C-x c"     'emux-term-create
            "C-x K"     'emux-term-destroy
            "C-x M-s"   'emux-jump-to-screen
            "C-x P"     'emux-session-load-template
            "C-x R"     'emux-screen-rename
            "C-x r"     'emux-term-rename
            "C-x s"     'emux-screen-switch
            "C-x S"     'emux-session-switch
            "M-."       'comint-dynamic-complete)
    :hercules
        (:show-funs #'meq/emux-hercules-show
        :hide-funs #'meq/emux-hercules-hide
        :toggle-funs #'meq/emux-hercules-toggle
        :keymap 'term-mode-map
        ;; :transient t
        ))
#+end_src

***** elscreen

#+call: hash() :exports none

#+RESULTS:
: 20210601225343633878500

#+name: 20210601225343633878500
#+begin_src emacs-lisp
(use-package! elscreen
    :straight (elscreen :type git :host github :repo "knu/elscreen" :branch "master")
    :gsetq
        ;; NOTE: Remember to escape the backslash
        (elscreen-prefix-key "C-S-\\")
    :config/defun* (meq/elscreen-hercules-toggle nil (interactive))
    :hercules
        (:show-funs #'meq/elscreen-hercules-show
        :hide-funs #'meq/elscreen-hercules-hide
        :toggle-funs #'meq/elscreen-hercules-toggle
        :keymap 'elscreen-map
        ;; :transient t
        ))
#+end_src

***** escreen

Adapted From: https://tapoueh.org/blog/2009/09/escreen-integration/

#+call: hash() :exports none

#+RESULTS:
: 20210601225345097323100

#+name: 20210601225345097323100
#+begin_src emacs-lisp :comments org
(use-package escreen
    :load-emacs-file-preconfig ("escreen")
    :init/defun* (meq/escreen-hercules-toggle nil (interactive))
    :demon
        ;; ((naked "C-\\ l") 'escreen-get-active-screen-numbers-with-emphasis)
        ;; ((naked "M-[") 'dim:escreen-goto-prev-screen)
        ;; ((naked "M-]") 'dim:escreen-goto-next-screen)
        ;; ((naked "C-\\ DEL") 'dim:escreen-goto-prev-screen)
        ;; ((naked "C-\\ SPC") 'dim:escreen-goto-next-screen)

        ;; ([s-mouse-4] 'dim:escreen-goto-prev-screen)
        ;; ([s-mouse-5] 'dim:escreen-goto-next-screen)
        ((alloy-chord "||") 'meq/escreen-hercules-toggle)
    ;; :alloy
        ;; (:keymaps 'escreen-map
            ;; escreen-prefix-char 'dim:escreen-goto-last-screen)
        ;; (:keymaps 'term-raw-map
            ;; add support for C-\ from terms
            ;; escreen-prefix-char escreen-map

            ;; (naked "M-[") 'dim:escreen-goto-prev-screen
            ;; (naked "M-]") 'dim:escreen-goto-next-screen)
    :config/defun*
        ;; add C-\ l to list screens with emphase for current one
        (escreen-get-active-screen-numbers-with-emphasis nil
            "what the name says"
            (interactive)
                (let ((escreens (escreen-get-active-screen-numbers))
                    (emphased ""))

                    (dolist (s escreens)
                        (setq emphased
                            (concat emphased (if (= escreen-current-screen-number s)
                                (propertize (number-to-string s)
                                    ;;'face 'custom-variable-tag) " ")
                                    'face 'info-title-3)
                                    ;;'face 'font-lock-warning-face)
                                    ;;'face 'secondary-selection)
                                (number-to-string s))
                            " ")))
                    (message "escreen: active screens: %s" emphased)))

        (dim:escreen-goto-last-screen nil (interactive)
            (escreen-goto-last-screen)
            (escreen-get-active-screen-numbers-with-emphasis))

        (dim:escreen-goto-prev-screen (&optional n) (interactive "p")
            (escreen-goto-prev-screen n)
            (escreen-get-active-screen-numbers-with-emphasis))

        (dim:escreen-goto-next-screen (&optional n) (interactive "p")
            (escreen-goto-next-screen n)
            (escreen-get-active-screen-numbers-with-emphasis))
    :config
        (require 'term)
    :hercules
        (:show-funs #'meq/escreen-hercules-show
        :hide-funs #'meq/escreen-hercules-hide
        :toggle-funs #'meq/escreen-hercules-toggle
        :keymap 'escreen-map
        ;; :transient t
        ))
#+end_src

**** window manager

#+call: hash() :exports none

#+RESULTS:
: 20210601225346472879400

#+name: 20210601225346472879400
#+begin_src emacs-lisp
<<20210601225348036290600>>
#+end_src

***** exwm

#+call: hash() :exports none

#+RESULTS:
: 20210601225348036290600

#+name: 20210601225348036290600
#+begin_src emacs-lisp
(when (member "--exwm" command-line-args) (use-package exwm :demand t
    :config
        (require 'exwm-config)
        (exwm-config-default)
        ;; (exwm-enable)
        ))
#+end_src

**** system

#+call: hash() :exports none

#+RESULTS:
: 20210601225349590264700

#+name: 20210601225349590264700
#+begin_src emacs-lisp
<<20210601225351155331200>>
<<20210601225352808354500>>
#+end_src

***** paths

Adapted from [[Ergoemacs' Emacs Lisp Code for Setting PATH and exec-path section][http://ergoemacs.org/emacs/emacs_env_var_paths.html]]:

# TODO: Combine the current `$PATH' with `exec-path'

#+call: hash() :exports none

#+RESULTS:
: 20210601225351155331200

#+name: 20210601225351155331200
#+begin_src emacs-lisp
;; (eval `(let ((mypaths
;;     '(
;;         ,(concat "/home/" (getenv "USER") "/.nix-profile/bin")
;;         "/home/linuxbrew/.linuxbrew/bin"
;;         "/usr/bin"
;;         "/usr/sbin"
;;         ,(concat "/home/" (getenv "USER") "/.emacs.d/bin")
;;         ,(concat "/home/" (getenv "USER") "/.doom.d"))))
;;     ;; (setenv "PATH" (mapconcat 'identity mypaths ";") )
;;     (setq exec-path (append mypaths (list "." exec-directory)) )
;; ))
(use-package exec-path-from-shell
    :demand t
    :straight (exec-path-from-shell
        :type git
        :host github
        :repo "purcell/exec-path-from-shell"
        :branch "master"))
#+end_src

***** etc

#+call: hash() :exports none

#+RESULTS:
: 20210601225352808354500

#+name: 20210601225352808354500
#+begin_src emacs-lisp
#+end_src

**** damascus

#+call: hash() :exports none

#+RESULTS:
: 20210601225354262898500

#+name: 20210601225354262898500
#+begin_src emacs-lisp
(use-package damascus
    :demand t
    :straight nil
    :load-emacs-file-preconfig ("damascus")
    :load-emacs-file-postconfig ("help+20")
    ;; :hook
        ;; (find-file . meq/set-buffer-save-without-query)
    :gsetq
        (indent-tabs-mode nil
            confirm-kill-emacs nil)

        ;; Adapted From:
        ;; From: https://emacs.stackexchange.com/a/19507
        ;; User: https://emacs.stackexchange.com/users/50/malabarba
        ;; (byte-compile-warnings (not t))
        ;; (byte-compile warnings (not obsolete))
        
        ;; From: https://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/
        (initial-major-mode 'org-mode)

        ;; Follow symlinks
        (vc-follow-symlinks t)

        ;; Use Python Syntax Highlighting for ".xonshrc" files
        ;; (auto-mode-alist 
        ;;       (append '(".*\\.xonshrc\\'" . python-mode)
        ;;               auto-mode-alist))
        ;; (auto-mode-alist 
        ;;       (append '(".*\\.xsh\\'" . python-mode)
        ;;              auto-mode-alist))

        (user-full-name "Jeet Ray"
            user-mail-address "aiern@protonmail.com")
    :config/defun*
        ;; Answer: https://emacs.stackexchange.com/a/51829
        ;; User: https://emacs.stackexchange.com/users/2370/tobias
        (meq/set-buffer-save-without-query nil
            "Set `buffer-save-without-query' to t."
            (unless (variable-binding-locus 'buffer-save-without-query)
                (setq buffer-save-without-query t)))
    :init
        ;; From: https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation
        (if (and (meq/fbatp 'native-comp-available-p) (native-comp-available-p))
            (message "Native compilation is available")
            (message "Native complation is *not* available"))
        (if (meq/fbatp 'json-serialize)
            (message "Native JSON is available")
            (message "Native JSON is *not* available"))

        ;; (add-to-list 'org-src-lang-modes '("nix-repl" . nix-mode))
        ;; (org-babel-do-load-languages 'org-babel-load-languages '((nix-mode . t)))
        ;; (json (if (assoc :json params) (nth (+ (cl-position :json params) 1) params) nil))
        ;; (optargs (if (assoc '-- params) (nthcdr (+ (cl-position '-- params) 1) params) nil))
        ;; (if (or (eq json nil) (<= json 0)) "" "--json")
        ;; (if optargs (format "%s" optargs) "")
        ;; (format "%s" (cdr params))

        ;; This determines the style of line numbers in effect. If set to `nil', line
        ;; numbers are disabled. For relative line numbers, set this to `relative'.
        ;; Adapted From: https://www.reddit.com/r/emacs/comments/8fz6x2/relative_number_with_line_folding/dy7lmh7?utm_source=share&utm_medium=web2x&context=3
        ;; (display-line-numbers-mode 1)
        (setq display-line-numbers-type 'relative)

        ;; Adapted From:
        ;; Answer: https://stackoverflow.com/a/50716229/10827766
        ;; User: https://stackoverflow.com/users/1482346/muro
        (global-display-line-numbers-mode t)

        ;; Adapted From:
        ;; Answer: https://unix.stackexchange.com/a/152151
        ;; User: https://unix.stackexchange.com/users/72170/ole
        ;; No more typing the whole yes or no. Just y or n will do.
        ;; Makes *scratch* empty.
        (setq initial-scratch-message "")

        ;; Removes *scratch* from buffer after the mode has been set.
        (defun meq/remove-scratch-buffer nil
        (if (get-buffer "*scratch*")
            (kill-buffer "*scratch*")))
        (add-hook 'after-change-major-mode-hook 'meq/remove-scratch-buffer)

        ;; Removes *messages* from the buffer.
        (setq-default message-log-max nil)
        (kill-buffer "*Messages*")

        ;; Removes *Completions* from buffer after you've opened a file.
        (add-hook 'minibuffer-exit-hook
            '(lambda nil
                (let ((buffer "*Completions*"))
                (and (get-buffer buffer)
                        (kill-buffer buffer)))))

        ;; Don't show *Buffer list* when opening multiple files at the same time.
        (setq inhibit-startup-buffer-menu t)

        ;; Show only one active window when opening multiple files at the same time.
        (add-hook 'window-setup-hook 'delete-other-windows)

        (fset 'yes-or-no-p 'y-or-n-p)

        ;; From: https://kundeveloper.com/blog/autorevert/
        ;; Auto revert files when they change
        (global-auto-revert-mode t)
        ;; Also auto refresh dired, but be quiet about it
        (setq global-auto-revert-non-file-buffers t)
        (setq auto-revert-verbose nil)

        ;; The following avoids being ask to allow the file local
        ;; setting of `buffer-save-without-query'.
        ;; IMHO it is not a big risk:
        ;; The malicious code that must not be saved
        ;; should never be allowed to enter Emacs in the first place.
        ;; (put 'buffer-save-without-query 'safe-local-variable #'booleanp)

        ;; (toggle-debug-on-error)

        (unless (meq/which-theme) (cond
            ((member "--purple" command-line-args) (load-theme 'dracula-purple-dark))
            ((member "--orange" command-line-args) (load-theme 'dracula-orange-dark))
            ((member "--red" command-line-args) (load-theme 'exo-ui-red-dark))
            ((member "--flamingo" command-line-args) (load-theme 'herschel-flamingo-pink-dark))
            (t (load-theme 'exo-ui-red-dark)))))
#+end_src

*** org-tangle

Adapted from: https://github.com/hlissner/doom-emacs/blob/develop/bin/org-tangle

#+call: hash() :exports none

#+RESULTS:
: 20210601225359807196100

#+name: 20210601225359807196100
#+begin_src emacs-lisp :tangle (meq/tangle-path) :shebang "#!/usr/bin/env sh"
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-

(setq org-confirm-babel-evaluate nil)

(require 'cl-lib)
(require 'ox)
(require 'ob-tangle)

<<20210601225401786848500>>

(defun usage ()
  (with-temp-buffer
    (insert (format "%s %s [OPTIONS] [TARGETS...]\n"
                    "[1mUsage:[0m"
                    (file-name-nondirectory load-file-name))
            "\n"
            "A command line interface for tangling org-mode files. TARGETS can be\n"
            "files or folders (which are searched for org files recursively).\n"
            "\n"
            "This is useful for literate configs that rely on command line\n"
            "workflows to build it.\n"
            "\n"
            "[1mExample:[0m\n"
            "  org-tangle some-file.org\n"
            "  org-tangle literate/config/\n"
            "  org-tangle -p -l sh scripts.org > do_something.sh\n"
            "  org-tangle -p -l python -t tagA -t tagB file.org | python\n"
            "\n"
            "[1mOptions:[0m\n"
            "  -a --all\t\tTangle all blocks by default\n"
            "  -l --lang LANG\tOnly tangle blocks written in LANG\n"
            "  -p --print\t\tPrint tangled output to stdout than to files\n"
            "  -t --tag TAG\n"
            "     --and TAG\n"
            "     --or TAG\n"
            "    Lets you tangle org blocks by tag. You may have more than one\n"
            "    of these options.\n")
    (princ (buffer-string))))

(defun *org-babel-tangle (orig-fn &rest args)
  "Don't write tangled blocks to files, print them to stdout."
  (cl-letf (((symbol-function 'write-region)
             (lambda (start end filename &optional append visit lockname mustbenew)
               (princ (buffer-string)))))
    (apply orig-fn args)))

(defun *org-babel-tangle-collect-blocks (&optional language tangle-file)
  "Like `org-babel-tangle-collect-blocks', but will ignore blocks that are in
trees with the :notangle: tag."
  (let ((counter 0) last-heading-pos blocks)
    (org-babel-map-src-blocks (buffer-file-name)
      (let ((current-heading-pos
             (org-with-wide-buffer
              (org-with-limited-levels (outline-previous-heading)))))
        (if (eq last-heading-pos current-heading-pos) (cl-incf counter)
          (setq counter 1)
          (setq last-heading-pos current-heading-pos)))
      (unless (org-in-commented-heading-p)
        (require 'org)
        (let* ((tags (org-get-tags-at))
               (info (org-babel-get-src-block-info 'light))
               (src-lang (nth 0 info))
               (src-tfile (cdr (assq :tangle (nth 2 info)))))
          (cond ((member "notangle" tags))

                ((and (or or-tags and-tags)
                      (or (not and-tags)
                          (let ((a (cl-intersection and-tags tags :test #'string=))
                                (b and-tags))
                            (not (or (cl-set-difference a b :test #'equal)
                                     (cl-set-difference b a :test #'equal)))))
                      (or (not or-tags)
                          (cl-intersection or-tags tags :test #'string=))
                      t))

                ((or (not (or all-blocks src-tfile))
                     (string= src-tfile "no")  ; tangle blocks by default
                     (and tangle-file (not (equal tangle-file src-tfile)))
                     (and language (not (string= language src-lang)))))

                ;; Add the spec for this block to blocks under its language.
                ((let ((by-lang (assoc src-lang blocks))
                       (block (org-babel-tangle-single-block counter)))
                   (if by-lang
                       (setcdr by-lang (cons block (cdr by-lang)))
                     (push (cons src-lang (list block)) blocks))))))))
    ;; Ensure blocks are in the correct order.
    (mapcar (lambda (b) (cons (car b) (nreverse (cdr b)))) blocks)))
(advice-add #'org-babel-tangle-collect-blocks :override #'*org-babel-tangle-collect-blocks)

(defvar all-blocks nil)
(defvar and-tags nil)
(defvar or-tags nil)
(let (lang srcs and-tags or-tags)
  (pop argv)
  (while argv
    (let ((arg (pop argv)))
      (pcase arg
        ((or "-h" "--help")
         (usage)
         (error ""))
        ((or "-a" "--all")
         (setq all-blocks t))
        ((or "-l" "--lang")
         (setq lang (pop argv)))
        ((or "-p" "--print")
         (advice-add #'org-babel-tangle :around #'*org-babel-tangle))
        ((or "-t" "--tag" "--and")
         (push (pop argv) and-tags))
        ("--or"
         (push (pop argv) or-tags))
        ((guard (string-match-p "^--lang=" arg))
         (setq lang (cadr (split-string arg "=" t t))))
        ((guard (file-directory-p arg))
         (setq srcs
               (append (directory-files-recursively arg "\\.org$")
                       srcs)))
        ((guard (file-exists-p arg))
         (push arg srcs))
        (_ (error "Unknown option or file: %s" arg)))))

  (dolist (file srcs)
    (let ((backup (make-temp-file (file-name-base file) nil ".backup.org")))
      (unwind-protect
          ;; Prevent slow hooks from interfering
          (let (org-mode-hook)
            ;; We do the ol' switcheroo because `org-babel-tangle' writes
            ;; changes to the current file, which would be imposing on the user.
            (copy-file file backup t)
            (with-current-buffer (find-file-noselect file)
              ;; Tangling doesn't expand #+INCLUDE directives, so we do it
              ;; ourselves, since includes are so useful for literate configs!
              ;; (org-export-expand-include-keyword)
              (org-babel-tangle nil nil lang)))
        (ignore-errors (copy-file backup file t))
        (ignore-errors (delete-file backup)))))
  (kill-emacs 0))
#+end_src

*** org-tangle-functions.el

#+call: hash() :exports none

#+RESULTS:
: 20210601225401786848500

#+name: 20210601225401786848500
#+begin_src emacs-lisp :tangle (meq/tangle-path)
(when (file-exists-p "~/<<username>>/README.org")
    (org-babel-lob-ingest "~/<<username>>/README.org"))
(when (file-exists-p "~/<<username>>/strange.aiern.org")
    (org-babel-lob-ingest "~/<<username>>/strange.aiern.org"))

(defun meq/get-header nil (interactive)
    (nth 4 (org-heading-components)))
(defun meq/tangle-path nil (interactive)
    (string-remove-prefix "/" (concat
        (org-format-outline-path (org-get-outline-path)) "/"
            (meq/get-header))))
(defun meq/get-theme-from-header nil (interactive)
    (string-remove-suffix "-theme.el" (meq/get-header)))
#+end_src
